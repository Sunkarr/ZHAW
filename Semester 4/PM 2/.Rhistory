install.packages("stringr")
library(stringr)
words
# Aufgabe 2
# Match words in words to this pattern word1+word2+word3
x <- as.vector(words)
# Aufgabe 2
# Match words in words to this pattern word1+word2+word3
x <- as.vector(as.character(words)
x <-
# Aufgabe 2
# Match words in words to this pattern word1+word2+word3
x <- as.vector(as.character(words)
x <- str_extract(x, "word1+word2+word3")
c <- words
str_c(c, collapse = "+")
c <- str_c(c, collapse = "+")
x <- words
x <- str_c(c, collapse = "+")
remove(c)
# die mit einem Vokal beginnen.
x <- str_subset(words, "^[aeiouAEIOU]")
# die mit einem Vokal beginnen.
str_subset(words, "^[aeiou]")
# die nur Konsonanten enthalten (Tipp: Denken Sie an passende “nicht”-Vokale).
str_subset(words, "^[^aeiou]+$")
# die auf ed, aber nicht auf eed enden.
str_subset(words, "ed$")
# die auf ed, aber not auf eed enden.
str_subset(words, "ed$")
# die auf ed, aber not auf eed enden.
str_subset(words, "$ed$")
# ending on ed but not on eed
str_subset(words, "ed$") %>% str_subset("eed$", negate = TRUE)
# ending with ing or ise
str_subset(words, "ing$|ise$")
# b = word group containing cie or ei without c before
str_subset(words, "cie|ei") %>% str_subset("cie", negate = TRUE)
# a = word group containing cei or ie without c before
str_subset(words, "cei|ie") %>% str_subset("cie", negate = TRUE)
# Any word containing q but not qu
str_subset(words, "q") %>% str_subset("qu", negate = TRUE)
# Any word containing q but not qu
# Any word containing q but not qu
str_subset(words, "q") %>% str_subset("qu", negate = TRUE)
# Any word containing q
str_subset(words, "q")
imdb_urls <- c(
"https://www.imdb.com/title/tt6751668/?ref_=hm_fanfav_tt_4_pd_fp1",
"https://www.imdb.com/title/tt0260991/",
"www.imdb.com/title/tt7282468/reviews",
"https://m.imdb.com/title/tt4768776/"
)
# Extract the movie id from the urls
str_extract(imdb_urls, "tt[0-9]+")
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = str_extract(filenames, "[0-9]{4}"),
month = str_extract(filenames, "[0-9]{4}([0-9]{2})[0-9]{2}"),
day = str_extract(filenames, "[0-9]{4}[0-9]{2}([0-9]{2})"),
hour = str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}"),
minute = str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})"),
second = str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})")
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = str_extract(filenames, "[0-9]{4}"),
month = str_extract(filenames, "[0-9]{4}([0-9]{2})[0-9]{2}"),
day = str_extract(filenames, "[0-9]{4}[0-9]{2}([0-9]{2})"),
hour = str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}"),
minute = str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})"),
second = str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})")
)
library(tibble)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = str_extract(filenames, "[0-9]{4}"),
month = str_extract(filenames, "[0-9]{4}([0-9]{2})[0-9]{2}"),
day = str_extract(filenames, "[0-9]{4}[0-9]{2}([0-9]{2})"),
hour = str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}"),
minute = str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})"),
second = str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})")
)
filenames <- c( 'S123.P2.C10_20120621_213422.jpg',
'S10.P1.C1_20120622_050148.jpg',
'S187.P2.C2_20120702_023501.jpg')
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = str_extract(filenames, "[0-9]{4}"),
month = str_extract(filenames, "[0-9]{4}([0-9]{2})[0-9]{2}"),
day = str_extract(filenames, "[0-9]{4}[0-9]{2}([0-9]{2})"),
hour = str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}"),
minute = str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})"),
second = str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})")
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = str_extract(filenames, "[0-9]{4}([0-9]{2})[0-9]{2}"),
day = str_extract(filenames, "[0-9]{4}[0-9]{2}([0-9]{2})"),
hour = str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}"),
minute = str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})"),
second = str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})")
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "[0-9]{4}([0-9]{2})[0-9]{2}")),
day = as.integer(str_extract(filenames, "[0-9]{4}[0-9]{2}([0-9]{2})")),
hour = as.integer(str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "[0-9]{4}[0-9]{2}([0-9]{2})")),
hour = as.integer(str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "[([0-9]{2})")),
hour = as.integer(str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "[([0-9]{2})")),
hour = as.integer(str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "([0-9]{2})")),
hour = as.integer(str_extract(filenames, "[0-9]{6}_([0-9]{2})[0-9]{2}")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "([0-9]{2})")),
hour = as.integer(str_extract(filenames, "_([0-9]{2})")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "([0-9]{2})")),
hour = as.integer(str_extract(filenames, "_[0-9]{2}")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "([0-9]{2})")),
hour = as.integer(str_extract(filenames, "_[0-9]{2}")),
minute = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{2}([0-9]{2})")),
second = as.integer(str_extract(filenames, "[0-9]{6}_[0-9]{4}([0-9]{2})"))
)
# Extract the number behind the last underscore
str_extract(filenames, "_([0-9]+)\\.")
# Extract the first two digits from the number behind the last underscore
str_extract(filenames, "_[0-9]{2}") %>% str_sub(2, 3)
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "([0-9]{2})")),
hour = as.integer(str_extract(filenames, "__[0-9]{2}") %>% str_sub(2, 3))),
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "([0-9]{2})")),
hour = as.integer(str_extract(filenames, "__[0-9]{2}") %>% str_sub(2, 3)),
minute = as.integer(str_extract(filenames, "")),
second = as.integer(str_extract(filenames, ""))
)
# Extract the first two digits from the number behind the last underscore
str_extract(filenames, "_[0-9]{2}") %>% str_sub(2, 3)
# Extract the first two digits from the number behind the second underscore
str_extract(filenames, "(?<=_)[0-9]{2}")
# Extract the first two digits from the last number
str_extract(filenames, "[0-9]{2}(?=[0-9]{2}_[0-9]{6})")
# Extract the first two digits from the last number in the filenames
str_extract(filenames, "[0-9]{2}(?=[0-9]{6})")
# Extract the first two digits from the last number (result: 21, 5, 2)
str_extract(filenames, "([0-9]{2})$")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]+)\\.")
# Extract the number behind the second underscore
str_extract(filenames, ".*_.*_([0-9]+)")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]+)\\.")
# Extract the first two digits from the number after the second underscore
str_extract(filenames, "_([0-9]{2})[0-9]+\\.")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]+){2}\\.")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]+){2}\\.")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]{2}+)\\.")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]+{2})\\.")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]+){2}\\.")
# Extract the number behind the second underscore
str_extract(filenames, "_([0-9]+)\\{2}.")
# Extract the number behind the second underscore
str_extract(filenames, "_{2}([0-9]+)\\.")
# Extract the number behind the second underscore
str_extract(filenames, "_(([0-9]+){2})\\.")
# Extract the number behind the second underscore
str_match(filenames, "_(\\d+)\\.jpg")[, 2] %>% as.integer()
# Extract the first two digits of the number behind the second underscore
str_match(filenames, "_(\\d{2})")[, 2] %>% as.integer()
# Extract the number behind the second underscore
str_match(filenames, "_(\\d+)\\.jpg") %>% as.integer()
# Extract the number behind the second underscore
str_match(filenames, "_(\\d{2}+)\\.jpg")[, 2] %>% as.integer()
# Extract the number behind the second underscore
str_match(filenames, "_(\\d+{2})\\.jpg")[, 2] %>% as.integer()
# Extract the number behind the second underscore
str_match(filenames, "_(\\d+){2}\\.jpg")[, 2] %>% as.integer()
# Extract the first two digits of the number behind the second underscore
str_match(filenames, "_(\\d{2})")[, 2] %>% as.integer()
# Extract the first two digits of the number behind the second underscore
str_match(filenames, "_(\\d+{2})")[, 2] %>% as.integer()
# Extract the first two digits of the number behind the second underscore
str_match(filenames, "_(\\d{2})")[, 2] %>% as.integer()
# Extract the numbers -6 and -7
str_extract(filenames, "([0-9]{2})_([0-9]{6})_([0-9]{6})") %>% str_split("_") %>% map(~as.integer(.x)) %>% map_dfc(~.x) %>% set_names(c("hour", "minute", "second"))
# Create a tibble with the columns site, plot, camera, year, month, day, hour, minute, second
# and the values extracted from the filenames
tibble(
site = str_extract(filenames, "S[0-9]+"),
plot = str_extract(filenames, "P[0-9]+"),
camera = str_extract(filenames, "C[0-9]+"),
year = as.integer(str_extract(filenames, "[0-9]{4}")),
month = as.integer(str_extract(filenames, "([0-9]{2})")),
day = as.integer(str_extract(filenames, "([0-9]{2})")),
hour = as.integer(str_extract(filenames, "__[0-9]{2}") %>% str_sub(2, 3)),
minute = as.integer(str_extract(filenames, "")),
second = as.integer(str_extract(filenames, ""))
)
library(tidyverse)
# Regex pattern to capture Site, Plot, Camera, Date and Time
pattern <- "(S\d+)\.(P\d+)\.(C\d+)_([0-9]{4})([0-9]{2})([0-9]{2})_([0-9]{2})([0-9]{2})([0-9]{2})"
# Regex pattern to capture Site, Plot, Camera, Date and Time
pattern <- "(S\d+)\.(P\d+)\.(C\d+)_([0-9]{4})([0-9]{2})([0-9]{2})_([0-9]{2})([0-9]{2})([0-9]{2})"
# Extract data with str_match
matched <- str_match(filenames, pattern)
# Regex pattern to capture Site, Plot, Camera, Date and Time
pattern <- "(S\\d+)\\.(P\\d+)\\.(C\\d+)_([0-9]{4})([0-9]{2})([0-9]{2})_([0-9]{2})([0-9]{2})([0-9]{2})"
# Extract data with str_match
matched <- str_match(filenames, pattern)
# Convert to tibble and clean up
result <- tibble(
Site = matched[, 2],
Plot = matched[, 3],
Camera = matched[, 4],
Year = as.integer(matched[, 5]),
Month = as.integer(matched[, 6]),
Day = as.integer(matched[, 7]),
Hour = as.integer(matched[, 8]),
Minute = as.integer(matched[, 9]),
Second = matched[, 10]
)
print(result)
# Convert to tibble and clean up
result <- tibble(
Site = matched[, 2],
Plot = matched[, 3],
Camera = matched[, 4],
Year = as.integer(matched[, 5]),
Month = as.integer(matched[, 6]),
Day = as.integer(matched[, 7]),
Hour = as.integer(matched[, 8]),
Minute = as.integer(matched[, 9]),
Second = as.integer(matched[, 10])
)
print(result)
# Load the data
dat <- read_xlsx("/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/bad-table-psych.xlsx")
# Load the data (xlsx file) into a tibble
dat <- readxl::read_xlsx("/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/bad-table-psych.xlsx")
dat <- read_excel("/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/bad-table-psych.xlsx", header = TRUE)
library(readxl)
dat <- read_excel("/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/bad-table-psych.xlsx", header = TRUE)
path <- "/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/bad-table-psych.xlsx"
library(readxl)
path <- "/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/bad-table-psych.xlsx"
dat <- read_excel(path, skip = 2, n_max = 12)
View(dat)
library(janitor)
install.packages("janitor")
library(janitor)
clean_names(dat)
adressen = c(
"Platz der Republik 1, D-11011 Berlin",
"Dr.-Karl-Renner-Ring 3, A-1017 Wien",
"Bundesplatz 3, CH-3005 Bern"
)
# Extract street name
str_match(adressen, "([A-Za-z\\-\\. ]+ [0-9]+)")[, 2]
# Extract street name without number
str_match(adressen, "([A-Za-z\\-\\. ])")[, 2]
# Extract street name without number
str_match(adressen, "([A-Za-z\\-\\. ]+)")[, 2]
# Extract street name without number
str_match(adressen, "([A-Za-z\\-\\. ]+)")[, 1]
# Extract street name without number
str_match(adressen, "([A-Za-z\\-\\. ]+)")
# Extract street name without number
str_match(adressen, "([A-Za-z\\-\\.]+)")
# Extract street name without number
str_match(adressen, "([A-Za-z\\-\\. ]+)")
# Extract street name without number
str_match(adressen, "([A-Za-z\\-\\. ]+)")[, 2]
# Extract street name without number, remove last space
str_extract(adressen, "^[^0-9]+") %>% str_replace(" $", "")
# Extract house number
str_extract(adressen, "[0-9]+")
# Extract postal code
str_extract(adressen, "[0-9]{4,5}")
# Extract city
str_extract(adressen, "[A-Z][a-z]+")
# Extract city (the last word)
str_extract(adressen, "[^ ]+$")
# Extract country shortcut (character before postal code)
str_extract(adressen, " [A-Z]-")
# Extract country shortcut (character before postal code), without -
str_extract(adressen, "(?<=-)[A-Z]{2}|(?<= )[A-Z]{2}")
# Extract country shortcut (1-2 characters before postal code), without -
str_extract(adressen, "[A-Z]{1,2}(?=-[0-9]{4,5})")
# now i want to do every of those steps in one regex
pattern <- "([^0-9]+) ([0-9]+), ([A-Z]{1,2})-?([0-9]{4,5}) ([^ ]+)$"
matched <- str_match(adressen, pattern)
print(matched[, 2:6])
print(matched)
library(babynames)
babynames
library(dplyr)
babynames
library(babynames)
library(dplyr)
babynames
babynames <- babynames %>% filter(year == 2015)
install.packages("babyNames")
install.packages("babynames")
library(babynames)
library(dplyr)
babynames
babynames <- babynames
# Group by sex and summarize
babynames |>
group_by(sex) |>
summarize(
total = sum(n),
mean = mean(n),
median = median(n),
min = min(n),
max = max(n)
)
# Count the number of the name "shine"
babynames |>
filter(name == "Shine") |>
summarize(
total = sum(n)
)
# Count the number of names with exactly four vocals
babynames |>
filter(str_count(name, "[aeiou]") == 4) |>
summarize(
total = sum(n)
)
