judgments |>
group_by(condition, gender) |>
summarise(n = n(), mAge = mean(age))
load(TBC)
us_rent_income |>
group_by(State) |>
summarise(median_income = median(Median))
us_rent_income |>
pivot_wider(names_from = variable, values_from =c(estimate, moe)) |>
slice_head(n=3)
starwars |>
select(starts_with("h"), contains("e"))
head(starwars)
starwars <- as_tibble(starwars)
starwars |>
select(starts_with("h"), contains("e"))
View(starwars)
View(starwars)
starwars |>
select(starts_with("h") & contains("e"))
starwars |>
select(is.integer)
starwars |>
select(where(is.integer))
starwars |>
select(where(is.integer) | ends_with("color"))
starwars |>
mutate(heigth_class = case_when(
height < 150 ~ "small",
100 <= height < 150 ~ "medium",
starwars |>
mutate(heigth_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
starwars
starwars |>
select(name, height_class, mass) |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
select(name, height, height_class) |>
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
select(name, height, height_class) |>
arrange(desc(height))
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
class = factor(class,
levels = c("below100", "between", "above200"),
ordered = T)) |> pull(class)
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")) |>
class = factor(class, levels = c("below100", "between", "above200"), ordered = T)) |> pull(class)
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal") |>
class = factor(class, levels = c("below100", "between", "above200"), ordered = T)) |> pull(class)
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal") |>
class = factor(class, levels = c("below100", "between", "above200"), ordered = T)) |> pull(class)
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")
class = factor(class, levels = c("below100", "between", "above200"), ordered = T)) |> pull(class)
starwars |>
mutate(height_class = case_when(
height < 100 ~ "small",
height > 180 ~ "tall",
TRUE ~ "normal")
class = factor(class, levels =
starwars |>
mutate(class = case_when(
height < 100 ~ "below100", # ~ = then
height > 200 ~ "above200",
TRUE ~ "between"),
class = factor(class,
levels = c("below100", "between", "above200"),
ordered = T)) |> pull(class)
starwars |>
mutate(class = case_when(
height < 100 ~ "small", # ~ = then
height > 200 ~ "big",
TRUE ~ "medium"),
class = factor(class,
levels = c("below100", "between", "above200"),
ordered = T)) |> pull(class)
starwars |>
mutate(class = case_when(
height < 100 ~ "small", # ~ = then
height > 200 ~ "big",
TRUE ~ "medium"),
class = factor(class,
levels = c("small", "medium", "big"),
ordered = T)) |> pull(class)
# Change any letter to uppercase
starwars |>
mutate_if(is.character, toupper)
# Standardize all numeric columns
starwars |>
mutate_if(is.numeric, scale)
read.csv("/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/Uebung01/exercises_fish.csv")
fish_df <- read.csv("/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/Uebung01/exercises_fish.csv")
View(fish_df)
View(fish_df)
View(fish_df)
View(fish_df)
# import data and define data types
fish_df <- read.csv("/Users/jonas/Library/CloudStorage/
OneDrive-ZHAW/Sem 4/PM 2/data/Uebung01
exercises_fish.csv") |>
mutate(across(where(is.character), as.factor)) |>
mutate(across(where(is.numeric), as.numeric)) |>
mutate(across(where(is.double), as.double))
fish_df
View(fish_df)
View(fish_df)
fish_df |>
separate(`common_name-size`, sep = " - ", into=c("name", "age"), remove=TRUE) |>
pivot_wider(names_from = variable, values_from = value) -> fish_df
library(tidyverse)
library(dplyr)
fish_df <- read_csv(file = dataPath,
col_types = cols(
salmon_id = col_integer(),
`common_name-size` = col_factor(),
variable = col_factor(),
value = col_double()))
dataPath <- "/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/Uebung01/fish.csv"
fish_df <- read_csv(file = dataPath,
col_types = cols(
salmon_id = col_integer(),
`common_name-size` = col_factor(),
variable = col_factor(),
value = col_double()))
dataPath <- "/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/Uebung01/exercises_fish.csv"
fish_df <- read_csv(file = dataPath,
col_types = cols(
salmon_id = col_integer(),
`common_name-size` = col_factor(),
variable = col_factor(),
value = col_double()))
fish_df |>
separate(`common_name-size`, sep = " - ", into=c("name", "age"), remove=TRUE) |>
pivot_wider(names_from = variable, values_from = value) -> fish_df
dataPath <- "/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/Uebung01/exercises_fish.csv"
fish_df <- read_csv(file = dataPath,
col_types = cols(
salmon_id = col_integer(),
`common_name-size` = col_factor(),
variable = col_factor(),
value = col_double()))
View(fish_df)
View(fish_df)
fish_df |>
separate(`common_name-size`, sep = " - ", into=c("name", "age"), remove=TRUE) |>
pivot_wider(names_from = variable, values_from = value) -> fish_df
View(fish_df)
View(fish_df)
fish_df |>
select(age, IGF1_ng_ml) |>
filter(name == "Steelhead")
fish_df |>
filter(name == "Steelhead") |>
select(age, IGF1_ng_ml)
fish_df |>
filter(name == "Steelhead") |>
select(age, IGF1_ng_ml) -> x
remove(x)
fish_df |>
filter(name.startsWith("S")) |>)
fish_df |>
filter(name.startsWith("S"))
fish_df |>
filter(str_starts(name, "S")) |>)
fish_df |>
filter(str_starts(name, "S"))
fish_df |>
filter(str_starts(name, "S")) |>
sort(desc(name, length_mm)) |>
fish_df |>
filter(str_starts(name, "S")) |>
sort(desc(name, length_mm))
fish_df |>
filter(str_starts(name, "S")) |>
sort(desc(name))
dataPath <- "/Users/jonas/Library/CloudStorage/OneDrive-ZHAW/Sem 4/PM 2/data/Uebung01/exercises_fish.csv"
fish_df <- read_csv(file = dataPath,
col_types = cols(
salmon_id = col_integer(),
`common_name-size` = col_factor(),
variable = col_factor(),
value = col_double()))
fish_df |>
separate(`common_name-size`, sep = " - ", into=c("name", "age"), remove=TRUE) |>
pivot_wider(names_from = variable, values_from = value) -> fish_df
fish_df |>
filter(name == "Steelhead") |>
select(age, IGF1_ng_ml)
fish_df |>
filter(str_starts(name, "S")) |>
sort(desc(name))
fish_df |>
filter(str_starts(name, "S")) |>
sort(desc(length_mm))
fish_df |>
filter(str_starts(name, "S")) |>
select(-igf1_ng_ml) |>
fish_df |>
filter(str_starts(name, "S")) |>
select(-igf1_ng_ml) |>
arrange(name, desc(length_cm))
fish_df |>
filter(str_starts(name,'S')) |>
select( -IGF1_ng_ml) |>
arrange(name, desc(length_mm))
fish_df |>
group_by(age)
fish_df |>
group_by(age) |>
rank(length_mm)
fish_df |>
group_by(age) |>
rank(desc(length_mm)) |>
fish_df |>
group_by(age) |>
rank(desc(length_mm))
fish_df |>
group_by(age) |>
rank(desc(length_mm)) |>
select(name, age, length_mm, rank)
fish_df |>
group_by(age)
rank(desc(length_mm))
fish_df |>
group_by(age) |>
rank(desc(length_mm))
fish_df |>
group_by(age) |>
filter(rank(length_mm) == 5)
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5)
arrange(age, desc(length_mm))
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5) |>
arrange(age, desc(length_mm))
fish_df |>
group_by(age) |> filter(rank(length_mm) <= 5)
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5) |>
arrange(name, desc(length_mm))
fish_df |>
group_by(age) |> filter(rank(length_mm) <= 5) |>
arrange(age, desc(length_mm))
fish_df |>
group_by(age) |> filter(rank(length_mm) <= 5) |>
arrange(name, desc(length_mm))
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5) |>
arrange(name, desc(length_mm)) <- grouped_fish
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5) |>
arrange(name, desc(length_mm)) <- grouped_fish
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5) |>
arrange(name, desc(length_mm)) -> top5
mean(top5$length_mm)
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5) |>
summarise(mean_length = mean(length_mm),
var_length = var(length_mm)))
fish_df |>
group_by(age) |>
filter(rank(length_mm) <= 5) |>
summarise(mean_length = mean(length_mm),
var_length = var(length_mm))
fish_df |>
filter(age == "yearling") |>
fish_df |>
filter(age == "yearling")
group_by(name)
summarise(mean_length = mean(length_mm),
var_length = var(length_mm)) |>
group_by(name)
group_by(name)
fish_df |>
filter(age == "yearling") |>
group_by(name)
fish_df |>
filter(age == "yearling") |>
group_by(name) |>
mutate(stan_length = scale(length_mm))
library(ggplot2)
fish_df |>
filter(age == "yearling") |>
group_by(name) |>
mutate(stan_length = scale(length_mm)) |>
ggplot(aes(x = name, y = stan_length)) +
geom_boxplot()
mtcars
mtcars |>
glimpse()
mtcars |>
as_tibble() |>
mtcars |>
as_tibble() |>
filter(hp < 100)
mtcars |>
filter(hp < 100) |>
select(mpg, hp, wt)
mtcars |>
filter(hp < 100) |>
summarise(count = n(), mean_mpg = mean(mpg))
mtcars |>
filter(hp < 100) |>
summarise(count = n())
mtcars
mtcars |>
select(-c(gear, carb))
mtcars |>
select(-c(gear, carb)) -> dat
dat |>
arrange(desc(cyl))
dat |>
arrange(desc(cyl, horsepower)) |>
dat |>
arrange(desc(cyl, horsepower))
dat |>
arrange(desc(cyl))
arrange(desc(horsepower))
dat |>
arrange(desc(cyl), desc(horsepower))
dat |>
arrange(desc(cyl), desc(hp))
dat |>
arrange(desc(cyl), desc(hp)) -> dat
dat |>
?dplyr::rename
dat |>
?dplyr::rename
dat |>
?dplyr::rename
?dplyr::rename
# d) Ã„ndern Sie den Namen der Variablen hp in power (?dplyr::rename).
dat |>
rename_with(.cols = hp, .fn = ~power) -> dat
# d) Ã„ndern Sie den Namen der Variablen hp in power (?dplyr::rename).
dat |>
rename(power = hp) -> dat
library(readr)
ugz_luftqualitaetsmessung_seit_2012 <- read_csv("Documents/GitHub/ZHAW/Semester 4/PM 2/LNW 1/ugz_luftqualitaetsmessung_seit-2012.csv")
View(ugz_luftqualitaetsmessung_seit_2012)
library(readr)
ugz_luftqualitaetsmessung_seit_2012 <- read_csv("/ugz_luftqualitaetsmessung_seit-2012.csv")
View(ugz_luftqualitaetsmessung_seit_2012)
ugz_luftqualitaetsmessung_seit_2012 <- read_csv("./ugz_luftqualitaetsmessung_seit-2012.csv")
View(ugz_luftqualitaetsmessung_seit_2012)
ugz_luftqualitaetsmessung_seit_2012 <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv")
View(ugz_luftqualitaetsmessung_seit_2012)
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv")
View(ugz_luftqualitaetsmessung_seit_2012)
data <- read.csv("ugz_luftqualitaetsmessung_seit-2012.csv")
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # setzt das Arbeitsverzeichnis auf den Ordner des Skripts
library(readr)
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv")
View(dat)
problems(dat)
View(dat)
View(dat)
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv",
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character()))
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv",
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character()))
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv",
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character()))
problems(dat)
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv",
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character()),
# Problem mit unterschiedlicher Spaltenanzahl ignorieren
skip_empty_rows = TRUE) %>%
# Problematische Spalten identifizieren und bereinigen
mutate(across(everything(), ~str_replace(., "([0-9]+\\.[0-9]+)([2][0][0-9][0-9]-[0-9][0-9]-[0-9][0-9])", "\\1,\\2")))
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv",
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character()),
# Problem mit unterschiedlicher Spaltenanzahl ignorieren
skip_empty_rows = TRUE)
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv",
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character()),
# Problem mit unterschiedlicher Spaltenanzahl ignorieren
skip_empty_rows = TRUE) |>
mutate(across(everything(), ~str_replace(., "([0-9]+\\.[0-9]+)([2][0][0-9][0-9]-[0-9][0-9]-[0-9][0-9])", "\\1,\\2")))
dat <- read_csv("ugz_luftqualitaetsmessung_seit-2012.csv",
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character())) |>
mutate(across(everything(), ~str_replace(., "([0-9]+\\.[0-9]+)([2][0][0-9][0-9]-[0-9][0-9]-[0-9][0-9])", "\\1,\\2")))
library(readr)
# 1. Datei zeilenweise einlesen
lines <- read_lines("ugz_luftqualitaetsmessung_seit-2012.csv")
# 2. Die problematische Zeile korrigieren
# Wir suchen nach dem Muster "11.292020" und ersetzen es durch "11.29,2020"
lines[2959] <- gsub("11\\.292020", "11.29,2020", lines[2959])
# 3. ÃœberprÃ¼fen, ob die Korrektur erfolgreich war
cat("Korrigierte Zeile:\n", lines[2959], "\n")
# 4. Die korrigierten Zeilen in eine temporÃ¤re Datei schreiben
temp_file <- tempfile(fileext = ".csv")
writeLines(lines, temp_file)
# 5. Die korrigierte Datei einlesen
daten <- read_csv(temp_file,
col_types = cols(.default = col_character()))
problems(dat)
library(readr)
library(dplyr)
# 1. Datei zeilenweise einlesen
lines <- read_lines("ugz_luftqualitaetsmessung_seit-2012.csv")
# 2. Die problematische Zeile 2959 anzeigen
cat("Problematische Zeile (original):\n", lines[2959], "\n")
# 3. Spezifisch fÃ¼r die Zeile 2959 das Muster "11.292020" durch "11.29,2020" ersetzen
lines[2959] <- gsub("11\\.292020", "11.29,2020", lines[2959])
# 4. Die korrigierte Zeile anzeigen
cat("Korrigierte Zeile:\n", lines[2959], "\n")
# 5. Die korrigierten Zeilen als CSV einlesen
dat <- paste(lines, collapse = "\n") %>%
read_csv(
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character())
)
# 6. ÃœberprÃ¼fen, ob das Problem behoben wurde
if(length(problems(dat)$row) > 0) {
cat("Es gibt noch", length(problems(dat)$row), "Probleme.\n")
print(problems(dat))
} else {
cat("Alle Probleme wurden behoben!\n")
}
# 1. Datei zeilenweise einlesen
lines <- read_lines("ugz_luftqualitaetsmessung_seit-2012.csv")
# 2. Die problematische Zeile 2959 anzeigen
cat("Problematische Zeile (original):\n", lines[2959], "\n")
# 3. Spezifisch fÃ¼r die Zeile 2959 das Muster "11.292020" durch "11.29,2020" ersetzen
lines[2959] <- gsub("11.292020", "11.29,2020", lines[2959])
# 4. Die korrigierte Zeile anzeigen
cat("Korrigierte Zeile:\n", lines[2959], "\n")
# 5. Die korrigierten Zeilen als CSV einlesen
dat <- paste(lines, collapse = "\n") %>%
read_csv(
locale = locale(encoding = "UTF-8"),
na = c("", "NA", "N/A"),
col_types = cols(.default = col_character())
)
View(dat)
View(dat)
problems(dat)
dat <- read_csv("test.csv")
library(readr)
test <- read_csv("test.csv")
View(test)
problems(dat)
problems(test)
View(dat)
