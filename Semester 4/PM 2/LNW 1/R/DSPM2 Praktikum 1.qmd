---
title: "DSPM2 Praktikum 1"
author: "Jonas Bratschi"
format: pdf
editor: visual
output:
  pdf_document:
    toc: true
    page_breaks: "before"
---

{{< pagebreak >}}

```{r include=FALSE}

library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate)


# Korrigieren der csv Datei

## Lese die CSV als Textzeilen ein
lines <- readLines("ugz_luftqualitaetsmessung_seit-2012.csv")

## Ersetze in allen Zeilen das fehlerhafte Muster durch einen Zeilenumbruch
## Sucht nach dem Muster Zahl (xx.xx) und Datum (JJJJ-MM-DD) und fügt dazwischen einen Absatz ein
corrected_lines <- gsub("(\\d{2}\\.\\d{2})(\\d{4}-\\d{2}-\\d{2})", "\\1\n\\2", lines)

## Falls in einem Element mehrere Zeilen enthalten sind, splitte sie in separate Elemente und erstelle eine Liste
fixed_lines <- unlist(strsplit(corrected_lines, "\n"))

## Speichere die korrigierte Datei
writeLines(fixed_lines, "corrected_data.csv")


# Importieren der korrigierten Datei und Bereinigung des Tabellenformats

## Using readr to import with all columns as character
data <- read_csv("corrected_data.csv",
                 col_names = FALSE,
                 col_types = cols(.default = col_character()))


## Extract and clean the first column
standort <- data[1,] %>% unlist()|>
  str_replace_all("Zürich ", "") |>   # Remove "Zürich "
  tolower() |>                        # Convert to lowercase
  str_replace_all("strasse", "")  |>  # Remove "strasse"
  str_replace_all(c("ä" = "ae", "ö" = "oe", "ü" = "ue", "Ä" = "Ae", "Ö" = "Oe", "Ü" = "Ue")) # Replace umlauts

## Check unique standort (without first element "date")
standort_unique <- unique(standort[-1])
  

einheiten <- data[4,] |>           # Extract the fourth row and convert to a vector
  tolower() |>                      # Convert to lowercase
  str_replace_all(">", "gt") |>     # Replace ">" with "gt"
  replace_na("")                    # Replace NA with ""

## Combine column names with units and rename first element to "datum"
new_colnames <- paste(standort, einheiten, sep = "-") |>
  replace(1, "datum")

## Remove unnecessary rows (1-6)
data <- data[-c(1:6),]

## Insert new_rownames [,1]
colnames(data) <- new_colnames

## Pivot the data
data_long <- data %>%
  pivot_longer(
    cols = -datum, # Keep the 'datum' column as is
    names_to = c("standort", "variable"), # Split column names into 'location' and 'variable'
    names_sep = "-" # Separate location and variable by minus
  ) %>%
  pivot_wider(
    names_from = variable, # Use 'variable' to create new columns
    values_from = value # Fill the new columns with 'value'
  ) |>
  mutate(across(everything(), ~na_if(., "NaN"))) # Replace "NaN" with NA

## change data types
data_long <- data_long |>
  mutate(standort = factor(standort, levels = standort_unique)) |> # Change 'standort' to factor
  mutate(across(3:15, as.numeric)) |> # Change columns 3 to 15 to numeric
  mutate(datum = as.Date(datum, format = "%Y-%m-%d")) # Change 'datum' to date


## Check datatypes
str(data_long)


# Erweiterung des Datensatzes


## Neue Spalten für Jahr, Monat und Wochentag hinzufügen
monate <- c("Jan", "Feb", "Mar", "Apr", "Mai", "Jun", 
            "Jul", "Aug", "Sep", "Okt", "Nov", "Dez")
wochentage <- c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")

## Datentransformation
data_long <- data_long |> 
  mutate(
    datum = as.Date(datum), # Die Spalte datum wird in ein echtes Datumsobjekt umgewandelt.
    jahr = year(datum), # Aus dem Datum wird das Jahr extrahiert und in einer neuen Spalte jahr gespeichert.
    monat = factor(
      monate[month(datum)],
      levels = monate,
      ordered = TRUE
    ), # Monat wird extrahiert als nummer abgespeichert und mit dem entsprechenden element aus dem Vektor monate angereichert
    wochentag = factor(
      wochentage[wday(datum, week_start = 1)],
      levels = wochentage,
      ordered = TRUE
    )
  ) # Wochentag wird extrahiert als nummer abgespeichert und mit dem entsprechenden element aus dem Vektor wochentage angereichert

str(data_long)

```

# Video

Link zum Video:

[Meeting with Bratschi Jonas (bratsjon)-20250315_174637-Meeting Recording.mp4](https://zhaw-my.sharepoint.com/:v:/g/personal/bratsjon_students_zhaw_ch/Eb7rGeENQYFHleXuQVGoLtkB-pkKR27RZxZrgd6hyku1cA?e=ZfTUm2&nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJTdHJlYW1XZWJBcHAiLCJyZWZlcnJhbFZpZXciOiJTaGFyZURpYWxvZy1MaW5rIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXcifX0%3D)

{{< pagebreak >}}

# Visualisierungen

## Aufgabe a)

Stellen Sie in einem Scatterplot für den Standort Stampfenbachstrasse die Messgrössen Globalstrahlung (y-Achse) und die maximale Ozonkonzentration während einer Stunde (xAchse) dar. Legen Sie zudem einen Glätter in die Grafik. Schauen Sie das beide Achsen verständlich beschriftet sind und vergessen Sie die Bildunterschrift nicht. Ein Titel ist nicht notwendig.

```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-height: 5.85
#| fig-width: 8

data_long %>%
  filter(standort == "stampfenbach") %>%
  drop_na(o3_max_h1, strglo) %>%
  ggplot(aes(x = o3_max_h1, y = strglo)) +
  geom_point(alpha = 0.3) +
  geom_smooth(aes(color = "GAM-Glätter"), se = FALSE) +  # se = FALSE entfernt das Konfidenzintervall
  labs(
    x = "Höchstes Stundenmittel Ozonkonzentration [µg/m³]",
    y = "Globalstrahlung [W/m²]",
    caption = "Abb. 1: Zusammenhang zwischen maximaler Ozonkonzentration und Globalstrahlung mit Glätter",
  color = ""  # Entfernt den Titel der Farblegende
  ) +
  scale_color_manual(values = c("GAM-Glätter" = "blue")) +
  theme(
    legend.position = "bottom",
  plot.caption = element_text(size = 8, hjust = 0.5)  # Schriftgröße kleiner und zentriert
  )
```

{{< pagebreak >}}

## Aufgabe b)

Stellen Sie den Verlauf der Stickoxidkonzentration (NOx = NO + NO2) über den gesamten Zeitraum gemeinsam für die Standorte Schimmelstrasse und Heubeeribüel dar. Achten sie darauf, dass der zeitliche Verlauf der für beide Standorte gut erkennbar ist, beide Achsen und die Legende (innerhalb der Grafik plaziert) verständlich beschriftet sind und vergessen Sie die Bildunterschrift nicht. Die Grafik braucht keinen Titel.

```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-height: 5.85
#| fig-width: 8

data_long$nox <- data_long$no + data_long$no2
data_long %>%
  filter(
    standort == "schimmel" | standort == "heubeeribueel",
    nox > 0  # Filter für positive Werte wegen log-Skala
  ) %>%
  ggplot(aes(x = datum, y = nox, color = standort)) +
  geom_line() +
  scale_y_log10() +  # Logarithmische y-Achse hinzugefügt
  scale_color_manual(
    values = c("schimmel" = "brown3", "heubeeribueel" = "blue3"),
    labels = c("schimmel" = "Schimmelstrasse", "heubeeribueel" = "Heubeeribüel")
  ) +
  labs(
    x = "Datum",
    y = "Stickoxidkonzentration (NO + NO2) [µg/m³] (log-Skala)",
    caption = "Abb. 2: Zeitlicher Verlauf der Stickoxidkonzentration von 2012-2020 auf einer logarithmischen Skala",
    color = "Standort"
  ) +
  theme(
    legend.position = "bottom",
  plot.caption = element_text(size = 8, hjust = 0.5)  # Schriftgröße kleiner und zentriert
  )
```

{{< pagebreak >}}

## Aufgabe c)

Stellen Sie die Streuung der PM10 Konzentration an der Rosengartenstrasse pro Wochentag dar. Schauen Sie, dass beide Achsen verständlich beschriftet sind und vergessen Sie die Bildunterschrift nicht. Die Grafik braucht keinen Titel.

```{r, echo=FALSE, warning=FALSE, message=FALSE}

data_long %>%
  filter(standort == "rosengarten", !is.na(pm10)) %>%
  ggplot(aes(x = wochentag, y = pm10)) +
  geom_boxplot() +
  scale_y_log10() +  # fügt logarithmische Skala hinzu
  labs(
    x = "Wochentag",
    y = "PM10 Konzentration [µg/m³] (log-Skala)",
    caption = "Abb. 3: Boxplots der Feinstaubkonzentration nach Wochentagen auf einer logarithmischen Skala"
  )+
  theme(
    legend.position = "bottom",
  plot.caption = element_text(size = 8, hjust = 0.5)  # Schriftgröße kleiner und zentriert
  )

```

{{< pagebreak >}}

## Aufgabe d)

Stellen Sie den zeitlichen Verlauf der Stickoxidkonzentration an allen vier Stationen von 2012- 2020 für jeden Monat dar. In der Abbildung sollte der mittlere Verlauf und die Streuung der Monate für alle Jahre ersichtlich sein. Schauen Sie, dass beide Achsen verständlich beschriftet sind und vergessen Sie die Bildunterschrift nicht. Die Grafik braucht keinen Titel.

```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-height: 7
#| fig-width: 8

data_long %>%
  mutate(
    datum = as.Date(datum),
    standort = str_to_title(standort),
    nox = ifelse(nox <= 0, NA, nox)  # Ersetze Werte <= 0 mit NA
  ) %>%
  filter(
    datum >= as.Date("2014-01-01") & 
    datum <= as.Date("2020-12-31"),
    !is.na(nox)  # Filtere NA-Werte
  ) %>%
  ggplot(aes(x = datum, y = nox, fill = standort)) +
  geom_boxplot(
    aes(group = format(datum, "%Y-%m")), 
    outlier.size = 0.5, 
    alpha = 0.7
  ) +
  labs(
    x = "Jahr",
    y = "Stickoxidkonzentration (NO + NO2) [µg/m³] (log-Skala)",
    caption = "Abb. 4: Zeitliche Entwicklung der Stickoxidkonzentration auf einer logarithmischen Skala mit monatlicher Verteilung an vier Messstandorten."
  ) +
  scale_x_date(
    date_breaks = "1 year",
    date_labels = "%Y",
    expand = expansion(mult = 0.02)
  ) +
  scale_y_log10() +
  facet_wrap(~standort, ncol = 1) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 0, hjust = 0.5),
  plot.caption = element_text(size = 8, hjust = 0.5)  # Schriftgröße kleiner und zentriert
  )


```

{{< pagebreak >}}

## Quelle

Im Rahmen dieser Projektarbeit wurden Daten der Luftqualitätsmessungen der Stadt Zürich verwendet. Diese Daten wurden im Rahmen von **Open Government Data (OGD)** bereitgestellt und umfassen Messungen von Luftschadstoffen und meteorologischen Grössen an verschiedenen Standorten in der Stadt Zürich. Die Daten decken den Zeitraum vom **1. Januar 2012 bis zum 31. Oktober 2020** ab.

Detaillierte Informationen zu den Messgrössen und Attributen des Datensatzes sind auf den folgenden Webseiten verfügbar:

-   <https://data.stadt-zuerich.ch/dataset/luftqualitaet-historisierte-messungen>

-   <https://data.stadt-zuerich.ch/dataset/ugz_luftschadstoffmessung_tageswerte/download/uzg_ogd_metadaten.json>
